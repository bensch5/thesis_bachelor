% Encoding: UTF-8
@article{1_merrell,
author = {Merrell, Paul},
title = {Example-Based Procedural Modeling Using Graph Grammars},
year = {2023},
issue_date = {August 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {42},
number = {4},
issn = {0730-0301},
url = {https://doi.org/10.1145/3592119},
doi = {10.1145/3592119},
abstract = {We present a method for automatically generating polygonal shapes from an example using a graph grammar. Most procedural modeling techniques use grammars with manually created rules, but our method can create them automatically from an example. Our graph grammars generate graphs that are locally similar to a given example. We disassemble the input into small pieces called primitives and then reassemble the primitives into new graphs. We organize all possible locally similar graphs into a hierarchy and find matching graphs within the hierarchy. These matches are used to create a graph grammar that can construct every locally similar graph. Our method generates graphs using the grammar and then converts them into a planar graph drawing to produce the final shape.},
journal = {ACM Trans. Graph.},
month = {jul},
articleno = {60},
numpages = {16},
keywords = {local similarity, graph grammar, inverse procedural modeling}
}

@inproceedings{3_bokeloh_et_al,
author = {Bokeloh, Martin and Wand, Michael and Seidel, Hans-Peter},
title = {A connection between partial symmetry and inverse procedural modeling},
year = {2010},
isbn = {9781450302104},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1833349.1778841},
doi = {10.1145/1833349.1778841},
abstract = {In this paper, we address the problem of inverse procedural modeling: Given a piece of exemplar 3D geometry, we would like to find a set of rules that describe objects that are similar to the exemplar. We consider local similarity, i.e., each local neighborhood of the newly created object must match some local neighborhood of the exemplar. We show that we can find explicit shape modification rules that guarantee strict local similarity by looking at the structure of the partial symmetries of the object. By cutting the object into pieces along curves within symmetric areas, we can build shape operations that maintain local similarity by construction. We systematically collect such editing operations and analyze their dependency to build a shape grammar. We discuss how to extract general rewriting systems, context free hierarchical rules, and grid-based rules. All of this information is derived directly from the model, without user interaction. The extracted rules are then used to implement tools for semi-automatic shape modeling by example, which are demonstrated on a number of different example data sets. Overall, our paper provides a concise theoretical and practical framework for inverse procedural modeling of 3D objects.},
booktitle = {ACM SIGGRAPH 2010 Papers},
articleno = {104},
numpages = {10},
keywords = {modeling by example, inverse procedural modeling, geometry synthesis},
location = {Los Angeles, California},
series = {SIGGRAPH '10}
}

@ARTICLE{5_van_der_linden_et_al,
author={van der Linden, Roland and Lopes, Ricardo and Bidarra, Rafael},
journal={IEEE Transactions on Computational Intelligence and AI in Games}, 
title={Procedural Generation of Dungeons}, 
year={2014},
volume={6},
number={1},
pages={78-89},
doi={10.1109/TCIAIG.2013.2290371}}

@inproceedings{9_togelius_et_al,
author = {Togelius, Julian and Kastbjerg, Emil and Schedl, David and Yannakakis, Georgios N.},
title = {What is procedural content generation? Mario on the borderline},
year = {2011},
isbn = {9781450308724},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2000919.2000922},
doi = {10.1145/2000919.2000922},
abstract = {We try to clarify the concept of procedural content generation (PCG) through contrasting it to other forms of content generation in games with which it could easily be mistaken, and through discussing some properties of PCG which are sometimes thought of as necessary but are actually not. After drawing up some clear demarcations for what is and what is not PCG, we present two versions of a content generation system for Infinite Mario Bros which is intentionally designed to question these same demarcations. We argue that, according to our own definition, one version of the system is an example of PCG while the other is not, even though they are mostly identical. We hope that this paper answers some questions but raises others, and inspires researchers and developers to thread some less common ground in developing content generation techniques.},
booktitle = {Proceedings of the 2nd International Workshop on Procedural Content Generation in Games},
articleno = {3},
numpages = {6},
location = {Bordeaux, France},
series = {PCGames '11}
}

@ARTICLE{10_freiknecht,
author = {Freiknecht, Jonas},
title = {Procedural content generation for games},
year = {2021},
url = {https://madoc.bib.uni-mannheim.de/59000},
numpages = {149}
}

@INPROCEEDINGS{14_carli_et_al,
author={Carli, Daniel Michelon De and Bevilacqua, Fernando and Tadeu Pozzer, Cesar and d'Ornellas, Marcos Cordeiro},
booktitle={2011 Brazilian Symposium on Games and Digital Entertainment}, 
title={A Survey of Procedural Content Generation Techniques Suitable to Game Development}, 
year={2011},
volume={},
number={},
pages={26-35},
keywords={Rivers;Roads;Games;Sociology;Statistics;Shape;Humans;Survey;Procedural Generation;Game Development;3D},
doi={10.1109/SBGAMES.2011.15}}

@article{10.1145/325165.325247,
author = {Perlin, Ken},
title = {An image synthesizer},
year = {1985},
issue_date = {Jul. 1985},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {19},
number = {3},
issn = {0097-8930},
url = {https://doi.org/10.1145/325165.325247},
doi = {10.1145/325165.325247},
abstract = {We introduce the concept of a Pixel Stream Editor. This forms the basis for an interactive synthesizer for designing highly realistic Computer Generated Imagery. The designer works in an interactive Very High Level programming environment which provides a very fast concept/implement/view iteration cycle.Naturalistic visual complexity is built up by composition of non-linear functions, as opposed to the more conventional texture mapping or growth model algorithms. Powerful primitives are included for creating controlled stochastic effects. We introduce the concept of "solid texture" to the field of CGI.We have used this system to create very convincing representations of clouds, fire, water, stars, marble, wood, rock, soap films and crystal. The algorithms created with this paradigm are generally extremely fast, highly realistic, and asynchronously parallelizable at the pixel level.},
journal = {SIGGRAPH Comput. Graph.},
month = {jul},
pages = {287–296},
numpages = {10},
keywords = {algorithm development, fire, functional composition, interactive, pixel stream editor, solid texture, space function, stochastic modelling, turbulence, waves}
}

@inproceedings{16_perlin,
author = {Perlin, Ken},
title = {An image synthesizer},
year = {1985},
isbn = {0897911660},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/325334.325247},
doi = {10.1145/325334.325247},
abstract = {We introduce the concept of a Pixel Stream Editor. This forms the basis for an interactive synthesizer for designing highly realistic Computer Generated Imagery. The designer works in an interactive Very High Level programming environment which provides a very fast concept/implement/view iteration cycle.Naturalistic visual complexity is built up by composition of non-linear functions, as opposed to the more conventional texture mapping or growth model algorithms. Powerful primitives are included for creating controlled stochastic effects. We introduce the concept of "solid texture" to the field of CGI.We have used this system to create very convincing representations of clouds, fire, water, stars, marble, wood, rock, soap films and crystal. The algorithms created with this paradigm are generally extremely fast, highly realistic, and asynchronously parallelizable at the pixel level.},
booktitle = {Proceedings of the 12th Annual Conference on Computer Graphics and Interactive Techniques},
pages = {287–296},
numpages = {10},
keywords = {algorithm development, fire, functional composition, interactive, pixel stream editor, solid texture, space function, stochastic modelling, turbulence, waves},
series = {SIGGRAPH '85}
}

@article{18_mandelbrot_frame,
title={Fractals},
author={Mandelbrot, Benoit B and Frame, Michael},
journal={Encyclopedia of physical science and technology},
volume={5},
pages={579--593},
year={1987},
publisher={Academic Press Orlando, FL}
}
